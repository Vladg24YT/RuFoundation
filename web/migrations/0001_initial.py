# Generated by Django 4.0.6 on 2022-07-23 14:02

import auto_prefetch
import django.contrib.auth.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion

import web.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    system_migrated_operations = [
        migrations.RunSQL('CREATE EXTENSION IF NOT EXISTS citext'),
        migrations.CreateModel(
            name='UsedToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.TextField(verbose_name='Токен')),
                ('is_case_sensitive', models.BooleanField(default=True, verbose_name='Чувствителен к регистру')),
            ],
            options={
                'verbose_name': 'Использованный токен',
                'verbose_name_plural': 'Использованные токены',
                'abstract': False,
                'base_manager_name': 'prefetch_manager',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='VisualUserGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True, verbose_name='Название группы')),
                ('index', models.IntegerField(default=0, verbose_name='Порядок в списках')),
            ],
            options={
                'verbose_name': 'Визуальная группа',
                'verbose_name_plural': 'Визуальные группы',
                'abstract': False,
                'base_manager_name': 'prefetch_manager',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', web.fields.CITextField(error_messages={'unique': 'Пользователь с данным именем уже существует'}, max_length=150, unique=True, validators=[web.models.users.StrictUsernameValidator()], verbose_name='Имя пользователя')),
                ('wikidot_username', web.fields.CITextField(max_length=150, null=True, unique=True, validators=[web.models.users.StrictUsernameValidator()], verbose_name='Имя пользователя на Wikidot')),
                ('type', models.TextField(choices=[('normal', 'Обычный'), ('wikidot', 'Пользователь Wikidot'), ('system', 'Системный'), ('bot', 'Бот')], default='normal', verbose_name='Тип')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='-/users', verbose_name='Аватар')),
                ('bio', models.TextField(blank=True, verbose_name='Описание')),
                ('api_key', models.CharField(blank=True, max_length=67, null=True, unique=True, verbose_name='Апи-ключ')),
                ('is_forum_active', models.BooleanField(default=True, verbose_name='Активирован форум')),
                ('forum_inactive_until', models.DateTimeField(null=True, verbose_name='Деактивировать форум до')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активирован')),
                ('inactive_until', models.DateTimeField(null=True, verbose_name='Деактивировать до')),
                ('is_editor', models.BooleanField(default=False, verbose_name='Статус участника')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('visual_group', auto_prefetch.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='web.visualusergroup', verbose_name='Визуальная группа')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]

    operations = [
        *system_migrated_operations,
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.TextField(default='_default', verbose_name='Категория')),
                ('name', models.TextField(verbose_name='Имя')),
                ('title', models.TextField(verbose_name='Заголовок')),
                ('locked', models.BooleanField(default=False, verbose_name='Страница защищена')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Время изменения')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='web.article', verbose_name='Родитель')),
            ],
            options={
                'verbose_name': 'Статья',
                'verbose_name_plural': 'Статьи',
                'permissions': [('can_vote_article', 'Может голосовать за статью'), ('can_lock_article', 'Может заблокировать страницу для правок')],
            },
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.TextField(choices=[('disabled', 'Disabled'), ('updown', 'Updown'), ('stars', 'Stars')], default=None, null=True, verbose_name='Система рейтинга')),
            ],
            options={
                'verbose_name': 'Настройки',
                'verbose_name_plural': 'Настройки',
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.TextField(verbose_name='Сокращение')),
                ('title', models.TextField(verbose_name='Заголовок')),
                ('headline', models.TextField(verbose_name='Подзаголовок')),
                ('icon', models.ImageField(blank=True, null=True, upload_to='-/sites', verbose_name='Иконка')),
                ('domain', models.TextField(verbose_name='Домен для статей')),
                ('media_domain', models.TextField(verbose_name='Домен для файлов')),
                ('settings', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='web.settings')),
            ],
            options={
                'verbose_name': 'Сайт',
                'verbose_name_plural': 'Сайты',
                'permissions': [('can_vote_article', 'Может голосовать за статью')],
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate', models.IntegerField(verbose_name='Оценка')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='web.article', verbose_name='Статья')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.site', verbose_name='Сайт')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Оценка',
                'verbose_name_plural': 'Оценки',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True, verbose_name='Название')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.site', verbose_name='Сайт')),
            ],
            options={
                'verbose_name': 'Тег',
                'verbose_name_plural': 'Теги',
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(verbose_name='Название файла')),
                ('media_name', models.TextField(verbose_name='Название файла в ФС-хранилище')),
                ('mime_type', models.TextField(verbose_name='MIME-тип')),
                ('size', models.PositiveBigIntegerField(verbose_name='Размер файла')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.article', verbose_name='Статья')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_files', to=settings.AUTH_USER_MODEL, verbose_name='Автор файла')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_files', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь, удаливший файл')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.site', verbose_name='Сайт')),
            ],
            options={
                'verbose_name': 'Файл',
                'verbose_name_plural': 'Файлы',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(verbose_name='Имя')),
                ('settings', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='web.settings')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.site', verbose_name='Сайт')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
                'permissions': [('add_article_in_category', 'Может добавлять новые статьи в категорию'), ('change_article_in_category', 'Может изменять статьи в категории'), ('delete_article_in_category', 'Может удалять статьи в категории'), ('can_vote_article_in_category', 'Может голосовать за статьи в категории'), ('can_lock_article_in_category', 'Может заблокировать страницу для правок в категории')],
            },
        ),
        migrations.CreateModel(
            name='ArticleVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.TextField(verbose_name='Исходник')),
                ('rendered', models.TextField(blank=True, null=True, verbose_name='Рендер статьи')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.article', verbose_name='Статья')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.site', verbose_name='Сайт')),
            ],
            options={
                'verbose_name': 'Версия статьи',
                'verbose_name_plural': 'Версии статей',
            },
        ),
        migrations.CreateModel(
            name='ArticleLogEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.TextField(choices=[('source', 'Source'), ('title', 'Title'), ('name', 'Name'), ('tags', 'Tags'), ('new', 'New'), ('parent', 'Parent'), ('file_added', 'Fileadded'), ('file_deleted', 'Filedeleted'), ('file_renamed', 'Filerenamed'), ('wikidot', 'Wikidot')], verbose_name='Тип')),
                ('meta', models.JSONField(blank=True, default=dict, verbose_name='Мета')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
                ('rev_number', models.PositiveIntegerField(verbose_name='Номер правки')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.article', verbose_name='Статья')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.site', verbose_name='Сайт')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Запись в журнале изменений',
                'verbose_name_plural': 'Записи в журнале изменений',
            },
        ),
        migrations.AddField(
            model_name='article',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.site', verbose_name='Сайт'),
        ),
        migrations.AddField(
            model_name='article',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='articles', to='web.tag', verbose_name='Тэги'),
        ),
        migrations.AddConstraint(
            model_name='vote',
            constraint=models.UniqueConstraint(fields=('site', 'article', 'user'), name='web_vote_unique'),
        ),
        migrations.AddIndex(
            model_name='tag',
            index=models.Index(fields=['name'], name='web_tag_name_41cd6e_idx'),
        ),
        migrations.AddConstraint(
            model_name='tag',
            constraint=models.UniqueConstraint(fields=('site', 'name'), name='web_tag_unique'),
        ),
        migrations.AddConstraint(
            model_name='site',
            constraint=models.UniqueConstraint(fields=('domain',), name='web_site_domain_unique'),
        ),
        migrations.AddConstraint(
            model_name='site',
            constraint=models.UniqueConstraint(fields=('slug',), name='web_site_slug_unique'),
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['article', 'name'], name='web_file_article_c1ccbd_idx'),
        ),
        migrations.AddConstraint(
            model_name='file',
            constraint=models.UniqueConstraint(fields=('site', 'article', 'name', 'deleted_at'), name='web_file_unique'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['name'], name='web_categor_name_e51bae_idx'),
        ),
        migrations.AddConstraint(
            model_name='category',
            constraint=models.UniqueConstraint(fields=('site', 'name'), name='web_category_unique'),
        ),
        migrations.AddIndex(
            model_name='articleversion',
            index=models.Index(fields=['article', 'created_at'], name='web_article_article_eb894c_idx'),
        ),
        migrations.AddConstraint(
            model_name='articlelogentry',
            constraint=models.UniqueConstraint(fields=('site', 'article', 'rev_number'), name='web_articlelogentry_unique'),
        ),
        migrations.AddIndex(
            model_name='article',
            index=models.Index(fields=['category', 'name'], name='web_article_categor_006394_idx'),
        ),
        migrations.AddConstraint(
            model_name='article',
            constraint=models.UniqueConstraint(fields=('site', 'category', 'name'), name='web_article_unique'),
        ),
    ]
